{"version":3,"sources":["components/Card/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clickr","id","alt","dataObject","name","src","sequence","data","slice","randomSequence","randomData","Game","state","score","topscore","success","instruction","clicked","filter","char","newDataObject","console","log","setTimeout","setState","map","objectData","chooseNextOrder","this","randomChoice","Math","floor","random","length","includes","push","foundObject","obj","JSON","stringify","when","i","key","Component","App","style","backgroundImage","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"q2BAgBeA,MAZf,SAAcC,GAEZ,OACI,yBAAKC,UAAU,OAAOC,QAAS,WAAQF,EAAMG,OAAOH,EAAMI,MACxD,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,WAAWC,KAAMC,IAAK,gBAAkBR,EAAMM,WAAWC,KAAO,Y,mCCKtFE,GAJgBC,EAAKC,MAAM,GAIhB,IACXC,EAAiB,GACjBC,EAAa,GA6IFC,GA5IG,YAAOJ,G,4MAIvBK,MAAQ,CACNL,KAAMA,EACNG,WAAYH,EACZD,SAAUA,EACVO,MAbQ,EAcRC,SAbW,EAcXC,QAAS,UACTC,YAAa,4B,EAQjBC,QAAU,SAAAhB,GAGN,IAAIE,EAAa,EAAKS,MAAML,KAAKW,QAAO,SAAAC,GAAI,OAAIA,EAAKlB,KAAOA,KAAI,GAQ5DmB,EAAkBjB,EACtB,GAAKA,EAAWc,QAaT,CACD,EAAKL,MAAMC,MAAQ,EAAKD,MAAME,WAChCO,QAAQC,IAAI,0BAA2B,EAAKV,MAAMC,OAClD,EAAKD,MAAME,SAAW,EAAKF,MAAMC,OAEnC,EAAKD,MAAMC,MAAQ,EACnB,EAAKD,MAAMG,QAAU,KACrB,EAAKH,MAAMI,YAAc,2BAEbO,YAAY,WAAQ,EAAKX,MAAMG,QAAQ,UACnD,EAAKS,SAAS,CAACT,QAAS,EAAKH,MAAMG,YAChC,KAIH,EAAKH,MAAML,KAAKkB,KAAK,SAAAC,GACnBA,EAAWT,SAAU,UA5BvBG,EAAcH,SAAU,EACxBI,QAAQC,IAAIF,GACZ,EAAKR,MAAMC,QACXQ,QAAQC,IAAI,UAAY,EAAKV,MAAMC,OACnC,EAAKD,MAAMG,QAAU,MACrBM,QAAQC,IAAI,OAASnB,EAAWF,IAGhC,EAAKW,MAAML,KAAKJ,EAAWF,GAAG,GAAKmB,EACnCC,QAAQC,IAAI,EAAKV,MAAML,MACvB,EAAKK,MAAMI,YAAc,yBAuB3B,EAAKQ,SAAS,CAAEjB,KAAM,EAAKK,MAAML,KAAMM,MAAO,EAAKD,MAAMC,MACzDE,QAAS,EAAKH,MAAMG,QAASD,SAAU,EAAKF,MAAME,WACjDO,QAAQC,IAAI,EAAKV,MAAML,MACtB,EAAKoB,mB,kEApDPC,KAAKD,oB,wCAyDPlB,EAAiB,GACjBC,EAAa,GAKfH,EAAKkB,KAAK,WAGJ,IAAII,EAAeC,KAAKC,MAAMD,KAAKE,SAAYzB,EAAK0B,QAIvD,IAHGJ,GAA8B,EAC7BR,QAAQC,IAAI,iBAAmBO,GAE5BpB,EAAeyB,SAASL,IAC1BA,EAAeC,KAAKC,MAAMD,KAAKE,SAAWzB,EAAK0B,QAC/CJ,GAA8B,EAI9BpB,EAAe0B,KAAKN,GACpB,IAAIO,EAAc7B,EAAKW,QAAO,SAAAmB,GAAG,OAAIA,EAAIpC,KAAO4B,KAEhDR,QAAQC,IAAI,UAAYgB,KAAKC,UAAUH,IACvCf,QAAQC,IAAIb,GAEZC,EAAU,sBAAOA,GAAP,YAAsB0B,IAEhCf,QAAQC,IAAI,sBAAwBZ,EAAWuB,WAKnDZ,QAAQC,IAAIZ,EAAWuB,QAEvBvB,EAAWe,KAAK,SAACY,GAAD,OAAShB,QAAQC,IAAIe,MACrCT,KAAKJ,SAAS,CAACd,WAAYA,M,+BAIrB,IAAD,OACP,OAAO,yBAAKZ,UAAU,WAIjB,kBAAC,IAAD,CAAO0C,KAA2B,OAArBZ,KAAKhB,MAAMG,SACtB,6BAEDa,KAAKhB,MAAMF,WAAWe,KAAK,SAACN,EAAMsB,GAE9B,OAAO,kBAAC,EAAD,CAAMtC,WAAYgB,EAAMuB,IAAKD,EAAGxC,GAAKkB,EAAKlB,GACjDD,OAAQ,EAAKiB,eAKlB,4BAAQnB,UAAU,cACjB,yBAAKA,UAAU,YAAf,eAEA,yBAAKA,UAAS,oCAA+B8B,KAAKhB,MAAMG,UAErDa,KAAKhB,MAAMI,aACd,yBAAKlB,UAAU,SAAf,UAAgC8B,KAAKhB,MAAMC,MAA3C,oBAAqEe,KAAKhB,MAAME,gB,GApIrE6B,cCSJC,MAxBf,SAAa/C,GAWX,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,kBAAkB+C,MAT7B,CACNC,gBAAgB,sCAChBC,gBAAiB,UAQb,4CACA,yGAEF,kBAAC,EAAD,QCTcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.2aef30c5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Card(props) {\n\n  return (\n      <div className=\"card\" onClick={() => { props.clickr(props.id) } }>\n        <div className=\"img-container\">\n          <img alt={props.dataObject.name} src={\"images/chars/\" + props.dataObject.name + \".jpg\"} />\n        </div>\n      </div>\n    );\n  \n}\n\nexport default Card;\n\n","\nimport \"./style.css\";\nimport Card from \"../Card\";\nimport { Component } from \"react\";\nimport data from \"../../data.json\";\nimport { render } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport Shake from 'react-reveal/Shake';\n\n// make a duplicate of the array\nlet availableData = data.slice(0);\nlet newchars = [];\nlet score = 0;\nlet topscore = 0;\nlet sequence = [];\nlet randomSequence = [];\nlet randomData = [];\nconst originalData = [...data];\n\nclass Game extends Component {\n\n  state = {\n    data: data,\n    randomData: data,\n    sequence: sequence,\n    score: score,\n    topscore: topscore,\n    success: \"not_yet\",\n    instruction: \"Click an image to begin!\"\n  };\n\n\n  componentDidMount() {\n    this.chooseNextOrder();\n  }\n\nclicked = id => {\n  // find the object that has this id in the original full data set\n\n    let dataObject = this.state.data.filter(char => char.id === id)[0];\n\n    // alternate method:\n\n//    let dataObject = this.state.data[id-1];\n\n   // console.log(\"Found object: \" + dataObject);\n \n    let newDataObject = [ dataObject ][0];\n    if (!dataObject.clicked) { \n      newDataObject.clicked = true;\n      console.log(newDataObject);\n      this.state.score++;\n      console.log(\"Score: \" + this.state.score);\n      this.state.success = \"yes\";\n      console.log(\"ID: \" + dataObject.id);\n\n\n      this.state.data[dataObject.id-1] = newDataObject;\n      console.log(this.state.data);\n      this.state.instruction = \"You guessed correctly!\";\n      //console.log(\"Changing this to clicked: \" + JSON.stringify(dataObject));\n    } else {\n      if (this.state.score > this.state.topscore) {\n        console.log(\"Setting top score to : \"+ this.state.score);\n        this.state.topscore = this.state.score;\n     }\n      this.state.score = 0;\n      this.state.success = \"no\";\n      this.state.instruction = \"You guessed incorrectly!\";\n      \n      let timer = setTimeout( () => { this.state.success=\"neutral\";\n      this.setState({success: this.state.success});\n     } , 2000);\n      \n\n      // reset all of the objects back to clicked = false\n      this.state.data.map( objectData => {\n        objectData.clicked = false;\n      })\n     \n    }\n\n    this.setState({ data: this.state.data, score: this.state.score,\n    success: this.state.success, topscore: this.state.topscore });\n     console.log(this.state.data);\n      this.chooseNextOrder();\n  }\n\nchooseNextOrder() {\n  // build up a randomSequence of unique #s\n  randomSequence = [];\n  randomData = [];\n\n  // loop through the data -- because this is how many\n  // random indexes we need -- to shuffle all the object for display purposes\n\ndata.map( () => {\n\n//       // Choose a random index\n      let randomChoice = Math.floor(Math.random() * (data.length));\n      randomChoice = randomChoice + 1;\n       console.log(\"randomChoice: \" + randomChoice);\n//       // Until we have a unique one, keep choosing another random #\n   while (randomSequence.includes(randomChoice)) {\n        randomChoice = Math.floor(Math.random() * data.length);\n        randomChoice = randomChoice + 1;\n      }\n//       // Once we have a new random #, we can add it to our array\n       \n        randomSequence.push(randomChoice);\n        let foundObject = data.filter(obj => obj.id === randomChoice);\n\n        console.log(\"Found: \" + JSON.stringify(foundObject ));\n        console.log(randomSequence);\n\n        randomData = [...randomData, ...foundObject ];\n\n        console.log(\"randomData Length: \" + randomData.length);\n        \n        \n    })\n   //  console.log(\"Random sequence: \" + JSON.stringify( randomData ));\n    console.log(randomData.length);\n   // console.log(data);\n    randomData.map( (obj) => console.log(obj) );\n    this.setState({randomData: randomData});\n}\n\n\nrender() {\n  return <div className=\"wrapper\">\n       {/* Pass the data array and the new random sequence to the Display */}\n  \n\n       <Shake when={this.state.success===\"no\"}>\n         <div>\n\n       {this.state.randomData.map( (char ,i) => {\n        //  console.log(char);\n            return <Card dataObject={char} key={i} id={ char.id } \n            clickr={this.clicked} />\n        }\n          ) }\n          </div>\n      </Shake>\n       <header className=\"App-header\">\n        <div className=\"logotype\">Clicky Game</div>\n\n        <div className={`instructions instructions-${this.state.success}`} \n        \n        >{ this.state.instruction }</div>\n        <div className=\"score\">Score: { this.state.score }  |   Top Score: { this.state.topscore }</div>\n      </header>\n  </div>\n}\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./style.css\";\nimport Game from \"./components/Game\";\n\nfunction App(props) {\n\n//   let bigIBack = \"/public/images/background_texture1.jpg\";\n  let styles= {\n  myback: {\n    backgroundImage: `url(images/background_texture2.jpg)`,\n    backgroundColor: 'black'\n  }\n}\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"bigInstructions\" style={styles.myback}>\n        <h1>Clicky Game!</h1>\n        <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n      </div>\n      <Game>\n      </Game>\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}